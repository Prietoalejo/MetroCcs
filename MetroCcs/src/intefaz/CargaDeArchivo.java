/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package intefaz;

<<<<<<< HEAD

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import javax.swing.*;
=======
<<<<<<< HEAD
import com.google.gson.Gson;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
=======
>>>>>>> develop
import java.io.File;
import java.io.FileReader;
import java.io.IOException;




>>>>>>> develop
/**
 *
 * @author adcd_
 */
public class CargaDeArchivo extends javax.swing.JFrame {

    /**
     * Creates new form CargaDeArchivo
     */
    public CargaDeArchivo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        botonCargarArchivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("Cargue un archivo JSON");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, -1, -1));

        botonCargarArchivo.setText("Cargar Archivo");
        botonCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarArchivoActionPerformed(evt);
            }
        });
        jPanel1.add(botonCargarArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarArchivoActionPerformed
         // Abrimos un selector de archivos para que el usuario elija el archivo JSON
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciona un archivo JSON");

        // Si el usuario selecciona un archivo y presiona "Abrir"
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();

            try (FileReader reader = new FileReader(archivoSeleccionado)){
                // Creamos un objeto Gson para manejar la lectura del JSON
                Gson gson = new Gson();
                JsonObject metroDeCaracas = gson.fromJson(reader, JsonObject.class);

                System.out.println("Archivo JSON cargado exitosamente.");

<<<<<<< HEAD
                // Verificamos si el JSON contiene la clave "Metro de Caracas"
                if (metroDeCaracas.has("Metro de Caracas")) {
                    JsonElement lineasElement = metroDeCaracas.get("Metro de Caracas");
=======
            // Leer el contenido del archivo y guardarlo en un String
<<<<<<< HEAD
            StringBuilder contenidoArchivo = new StringBuilder();
=======
            StringBuilder contenidoArchivo = new StringBuilder(); // Para almacenar todo el contenido
>>>>>>> develop
            try {
                Scanner lector = new Scanner(archivoSeleccionado);
                while (lector.hasNextLine()) {
                    String linea = lector.nextLine();
<<<<<<< HEAD
                    contenidoArchivo.append(linea).append("\n");
=======
                    contenidoArchivo.append(linea).append("\n"); // Agregar la línea al StringBuilder
>>>>>>> develop
                }
                lector.close();
>>>>>>> develop

                    // Confirmamos que "Metro de Caracas" es un arreglo antes de continuar
                    if (lineasElement != null && lineasElement.isJsonArray()) {
                        System.out.println("El sistema de metro es un arreglo. Procesando cada elemento...");

<<<<<<< HEAD
                        // Iteramos sobre cada elemento en el array de líneas
                        for (JsonElement lineaElement : lineasElement.getAsJsonArray()) {
                            if (lineaElement.isJsonObject()) {
                                // Convertimos el elemento actual a JsonObject para procesar la línea específica
                                JsonObject lineasObject = lineaElement.getAsJsonObject();
=======
<<<<<<< HEAD
                // Usar Gson para convertir el JSON en un Map
                Gson gson = new Gson();
                Map<String, List<Map<String, Object>>> metroDeCaracas = gson.fromJson(contenidoComoString, Map.class);

                // Iterar sobre el sistema de metro
                for (Map.Entry<String, List<Map<String, Object>>> sistemaEntry : metroDeCaracas.entrySet()) {
                    String nombreSistema = sistemaEntry.getKey();
                    System.out.println("Estaciones de " + nombreSistema + ":");

                    // Iterar sobre las líneas
                    List<Map<String, Object>> lineas = sistemaEntry.getValue();
                    for (Map<String, Object> linea : lineas) {
                        for (Map.Entry<String, Object> lineaEntry : linea.entrySet()) {
                            String nombreLinea = lineaEntry.getKey();
                            System.out.println("Línea: " + nombreLinea);

                            // Verificar si el valor de la línea es una lista de estaciones
                            if (lineaEntry.getValue() instanceof List) {
                                List<Object> estaciones = (List<Object>) lineaEntry.getValue();

                                // Iterar sobre las estaciones y mostrar la estación anterior y siguiente
                                for (int i = 0; i < estaciones.size(); i++) {
                                    Object estacion = estaciones.get(i);

                                    // Obtener la estación anterior y siguiente (si existen)
                                    String estacionAnterior = (i > 0) ? estaciones.get(i - 1).toString() : "N/A";
                                    String estacionSiguiente = (i < estaciones.size() - 1) ? estaciones.get(i + 1).toString() : "N/A";

                                    // Manejar el caso donde la estación es una conexión (Map)
                                    if (estacion instanceof String) {
                                        System.out.println("Estación actual: " + estacion + " - Anterior: " + estacionAnterior + " - Siguiente: " + estacionSiguiente);
                                    } else if (estacion instanceof Map) {
                                        Map<String, String> estacionConectada = (Map<String, String>) estacion;
                                        for (Map.Entry<String, String> conexion : estacionConectada.entrySet()) {
                                            System.out.println("Estacion actual: " + conexion.getKey() + " (conexion: " + conexion.getValue() + ") - Anterior: " + estacionAnterior + " - Siguiente: " + estacionSiguiente);
                                        }
                                    }
                                }
                            }
                        }
=======
                // Convertir el contenido a un objeto JSON
                JSONObject jsonObj = new JSONObject(contenidoComoString);
                System.out.println("Objeto JSON:");
                System.out.println(jsonObj.toString(4)); // Formateado con indentación
>>>>>>> develop

                                // Iteramos sobre cada clave en el objeto de líneas (cada clave representa una línea)
                                for (String nombreLinea : lineasObject.keySet()) {
                                    System.out.println("Línea: " + nombreLinea);
                                    JsonElement estacionesElement = lineasObject.get(nombreLinea);

                                    // Verificamos si las estaciones son un objeto (JSON complejo) o un array
                                    if (estacionesElement != null && estacionesElement.isJsonObject()) {
                                        // Caso: estaciones en formato de objeto
                                        JsonObject estacionesObject = estacionesElement.getAsJsonObject();
                                        String estacionAnterior = "N/A";  // Variable para almacenar la última estación procesada
                                        boolean primeraEstacion = true;  // Marca para identificar la primera estación

                                        // Iteramos sobre las estaciones en formato objeto (clave-valor)
                                        for (String estacionNombre : estacionesObject.keySet()) {
                                            System.out.println("Procesando estacion: " + estacionNombre);
                                            JsonElement estacionData = estacionesObject.get(estacionNombre);

<<<<<<< HEAD
                                            if (estacionData != null && estacionData.isJsonObject()) {
                                                // Caso: estación con conexiones (representada como objeto JSON)
                                                JsonObject estacionConectada = estacionData.getAsJsonObject();
                                                for (String conexionNombre : estacionConectada.keySet()) {
                                                    // Imprimimos la conexión de la estación
                                                    String conexionLinea = estacionConectada.get(conexionNombre).getAsString();
                                                    System.out.println("Estación conexion: " + conexionNombre + " (conexion: " + conexionLinea + ")");
                                                }
                                            } else if (estacionData != null && estacionData.isJsonPrimitive()) {
                                                // Caso: estación regular (representada como String)
                                                if (!primeraEstacion) {
                                                    // Imprimimos la estación y la estación anterior (si no es la primera)
                                                    System.out.println("Estación regular: " + estacionNombre + " - Anterior: " + estacionAnterior);
                                                }
                                                estacionAnterior = estacionNombre;  // Actualizamos la estación anterior
                                                primeraEstacion = false;
                                            }
                                        }
                                    } else if (estacionesElement != null && estacionesElement.isJsonArray()) {
                                        // Suponiendo un número máximo de estaciones, ajusta según sea necesario
                                        int MAX_ESTACIONES = 0;
                                        for (JsonElement estacionElement : estacionesElement.getAsJsonArray()){
                                            MAX_ESTACIONES++;
                                        }
                                        
                                        String[] estacionesArray = new String[MAX_ESTACIONES];
                                        int contadorEstaciones = 0;
                                        
                                        

                                        // Iteramos sobre las estaciones en formato de array
                                        System.out.println("Estaciones de la línea en formato de array.");
                                        for (JsonElement estacionElement : estacionesElement.getAsJsonArray()) {
                                            if (estacionElement.isJsonPrimitive()) {
                                                // Caso: estación en formato String
                                                String estacionNombre = estacionElement.getAsString();
                                                System.out.println("Estación: " + estacionNombre);
                                                // Almacenamos la estación en el array
                                                estacionesArray[contadorEstaciones++] = estacionNombre; 
                                            } else if (estacionElement.isJsonObject()) {
                                                // Caso: estación en formato objeto
                                                JsonObject estacionObj = estacionElement.getAsJsonObject();
                                                for (String estacionNombre : estacionObj.keySet()) {
                                                    System.out.println("Estación: " + estacionNombre);
                                                    // Almacenamos la estación en el array
                                                    estacionesArray[contadorEstaciones++] = estacionNombre; 
                                                }
                                            }
                                        }

                                        // Mostrar las estaciones nuevamente con anterior y siguiente
                                        System.out.println("\nMostrando estaciones con anterior y siguiente:");
                                        for (int i = 0; i < contadorEstaciones; i++) {
                                            String estacionActual = estacionesArray[i];
                                            String estacionAnterior = (i > 0) ? estacionesArray[i - 1] : "N/A"; // Obtener estación anterior
                                            String estacionSiguiente = (i < contadorEstaciones - 1) ? estacionesArray[i + 1] : "N/A"; // Obtener estación siguiente

                                            System.out.println("Estación: " + estacionActual + " - Anterior: " + estacionAnterior + " - Siguiente: " + estacionSiguiente);
                                        }
                                    } else {
                                        // Si el formato de estaciones no es objeto ni array, lo marcamos como inesperado
                                        System.out.println("Formato inesperado para las estaciones de la línea " + nombreLinea);
                                    }
                                }
                            }
                        }
                    } else {
                        System.out.println("El formato de 'Metro de Caracas' no es compatible o está vacío.");
=======
                    // Verificar si el valor es otro JSONObject (para iterar de forma anidada)
                    if (value instanceof JSONObject) {
                        JSONObject nestedObject = (JSONObject) value;
                        System.out.println("Este valor es otro JSONObject:");
                        System.out.println(nestedObject.toString(4)); // Formatear el objeto anidado
>>>>>>> develop
>>>>>>> develop
                    }
                } else {
                    System.out.println("'Metro de Caracas' no encontrado en el JSON.");
                }

            } catch (IOException e) {
                // Captura y muestra cualquier error de lectura del archivo
                System.out.println("Error leyendo el archivo");
                e.printStackTrace();
<<<<<<< HEAD
            } catch (Exception e) {
                // Captura y muestra cualquier otro error general durante el procesamiento
                System.out.println("Error procesando el archivo");
=======
<<<<<<< HEAD
            } catch (Exception e) {
                System.out.println("Error procesando el archivo");
=======
            } catch (org.json.JSONException e) {
                System.out.println("El contenido no es un JSON válido");
>>>>>>> develop
>>>>>>> develop
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_botonCargarArchivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CargaDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CargaDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CargaDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CargaDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CargaDeArchivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
